name: publish
on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  setup:
    runs-on: ubuntu-latest
    # runs only when a release branch PR is merged
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'releases/v') && github.event.pull_request.merged == true
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Git Tag name
        id: vars
        run: |
          # Extract version from branch name
          echo "tag=${GITHUB_HEAD_REF##*/v}" >> $GITHUB_OUTPUT
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.vars.outputs.tag }}
          release_name: Release v${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false

  publish:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.result == 'success'
    outputs:
      tag: ${{ needs.setup.outputs.tag }}
      upload_url: ${{ needs.setup.outputs.upload_url }}
    steps:
      - uses: extractions/setup-just@v3
        with:
          just-version: '1.40.0'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod

      - name: Initialize Git
        shell: bash
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "action@github.com"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Create distribution files.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          just make_distribution_files
          just upload_assets v${{ needs.setup.outputs.tag }}

  publish-tag:
    runs-on: ubuntu-latest
    # runs only when a tag is pushed
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: extractions/setup-just@v3
        with:
          just-version: '1.40.0'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod

      - name: Initialize Git
        shell: bash
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "action@github.com"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Extract version from tag
        id: vars
        run: |
          # Extract version from tag (remove 'refs/tags/v' prefix)
          echo "tag=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.vars.outputs.tag }}
          release_name: Release v${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false

      - name: Create distribution files.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          just make_distribution_files
          just upload_assets v${{ steps.vars.outputs.tag }}

  docker:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    permissions:
      packages: write
      contents: read
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/Nagaemonn/treemit
          tags: |
            type=raw,value=latest
            type=sha,format=short
            # タグpush時のみバージョンタグを付与
            ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && format('type=raw,value={0}', github.ref_name) || '' }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout the project
        uses: actions/checkout@v4
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/Nagaemonn/treemit:buildcache
          cache-to: type=registry,ref=ghcr.io/Nagaemonn/treemit:buildcache,mode=max